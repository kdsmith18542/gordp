name: GoRDP CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.21'
  GOLANGCI_LINT_VERSION: 'v1.54.2'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.20, 1.21, 1.22]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Install dependencies
      run: go mod download

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.txt
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: ${{ env.GOLANGCI_LINT_VERSION }}

    - name: Run golangci-lint
      run: golangci-lint run

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        go-version: [1.21]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Install dependencies
      run: go mod download

    - name: Build
      run: go build -v ./...

    - name: Build examples
      run: go build -v ./examples/...

  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install dependencies
      run: go mod download

    - name: Run benchmarks
      run: go test -bench=. -benchmem ./...

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install dependencies
      run: go mod download

    - name: Run go vet
      run: go vet ./...

    - name: Run staticcheck
      run: go install honnef.co/go/tools/cmd/staticcheck@latest
      run: staticcheck ./...

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test, lint, build, benchmark, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install dependencies
      run: go mod download

    - name: Build for multiple platforms
      run: |
        mkdir -p build
        GOOS=linux GOARCH=amd64 go build -ldflags "-X main.Version=$(git describe --tags --always --dirty)" -o build/gordp_linux_amd64 .
        GOOS=windows GOARCH=amd64 go build -ldflags "-X main.Version=$(git describe --tags --always --dirty)" -o build/gordp_windows_amd64.exe .
        GOOS=darwin GOARCH=amd64 go build -ldflags "-X main.Version=$(git describe --tags --always --dirty)" -o build/gordp_darwin_amd64 .
        GOOS=linux GOARCH=arm64 go build -ldflags "-X main.Version=$(git describe --tags --always --dirty)" -o build/gordp_linux_arm64 .
        GOOS=darwin GOARCH=arm64 go build -ldflags "-X main.Version=$(git describe --tags --always --dirty)" -o build/gordp_darwin_arm64 .

    - name: Build examples
      run: |
        go build -o build/interactive_client examples/interactive_client.go

    - name: Create release archive
      run: |
        mkdir -p release
        cp build/* release/
        cp README.md LICENSE plan.md release/
        tar -czf gordp-release.tar.gz release/

    - name: Upload release artifacts
      uses: actions/upload-artifact@v3
      with:
        name: gordp-release
        path: |
          build/
          gordp-release.tar.gz

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [test, lint, build]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: false
        tags: gordp:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  documentation:
    name: Documentation
    runs-on: ubuntu-latest
    needs: [test, lint, build]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install dependencies
      run: go mod download

    - name: Generate API documentation
      run: |
        mkdir -p docs
        go doc -all ./... > docs/api.md

    - name: Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: docs/ 